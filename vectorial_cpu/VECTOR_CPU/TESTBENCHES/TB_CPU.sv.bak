module TB_CPU;

	// Definir los tamaños de los buses de entrada y salida
	parameter I = 32;
	parameter N = 8;
	parameter R = 6;
	
	// Definir los nombres de las señales de entrada y salida
	logic clk, reset, start;
	logic [31:0] Instr;
	logic [R-1:0][N-1:0] ReadData;
	logic MemWriteM, EndFlag, COMFlag;
	logic [I-1:0] PC, Address;
	logic [R-1:0][N-1:0] WriteData;
	
	// Instanciar el módulo CPU
	cpu #(.I(I), .N(N), .R(R)) dut (
		.clk(clk),
		.reset(reset),
		.start(start),
		.Instr(Instr),
		.ReadData(ReadData),
		.MemWriteM(MemWriteM),
		.EndFlag(EndFlag),
		.COMFlag(COMFlag),
		.PC(PC),
		.Address(Address),
		.WriteData(WriteData)
	);
	
	// Definir los estímulos de entrada
	initial begin
		// Ciclo de reloj inicial
		clk = 0;
		#5;
		
		// Reset inicial
		reset = 1;
		start = 0;
		Instr = '0;
		ReadData = '0;
		#10;
		
		// Lanzar una instrucción
		reset = 0;
		start = 1;
		Instr = 32'hxxxxxx; // Aquí coloca la instrucción que quieres lanzar
		ReadData = '0;
		#10;
		
		// Verificar la salida del módulo
		// Aquí puedes comparar los valores de las señales de salida con los valores esperados
		// También puedes observar las señales de salida con una herramienta de visualización
		$finish;
	end
	
endmodule
